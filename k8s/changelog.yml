apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: app
  namespace: prod-2020-07
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  tls:
  - hosts:
    - 2020.changelog.com
    secretName: app-acme-tls
  rules:
  - host: 2020.changelog.com
    http:
      paths:
      - backend:
          serviceName: app
          servicePort: 4000
---
apiVersion: v1
kind: Service
metadata:
  name: app
  namespace: prod-2020-07
spec:
  ports:
  - name: http
    port: 4000
    protocol: TCP
    targetPort: 4000
  selector:
    app: app
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: uploads
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: linode-block-storage-retain
---
apiVersion: cert-manager.io/v1alpha3
kind: Certificate
metadata:
  name: wildcard-acme-tls
  namespace: prod-2020-07
spec:
  dnsNames:
  - '*.changelog.com'
  - changelog.com
  issuerRef:
    name: cert-manager-webhook-dnsimple-production
    kind: ClusterIssuer
  secretName: wildcard-acme-tls
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app
  namespace: prod-2020-07
  labels:
    app: app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: app
  template:
    metadata:
      labels:
        app: app
    spec:
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - app
            topologyKey: kubernetes.io/hostname
      containers:
      - env:
        - name: ALGOLIA_APPLICATION_ID
          valueFrom:
            secretKeyRef:
              name: algolia
              key: application_id
        - name: ALGOLIA_API_KEY2
          valueFrom:
            secretKeyRef:
              name: algolia
              key: api_key
        - name: CM_API_TOKEN_2
          valueFrom:
            secretKeyRef:
              name: campaignmonitor
              key: api_token
        - name: CM_SMTP_TOKEN
          valueFrom:
            secretKeyRef:
              name: campaignmonitor
              key: smtp_token
        - name: COVERALLS_REPO_TOKEN
          valueFrom:
            secretKeyRef:
              name: coveralls
              key: repo_token
        - name: DB_HOST
          value: db
        - name: DB_NAME
          value: db
        - name: DB_PASS
          valueFrom:
            secretKeyRef:
              name: db-postgres-secret
              key: password
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: db-postgres-secret
              key: username
        - name: GITHUB_API_TOKEN2
          valueFrom:
            secretKeyRef:
              name: github
              key: api_token
        - name: GITHUB_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: github
              key: client_id
        - name: GITHUB_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: github
              key: client_secret
        - name: MAKEFILE
          value: Makefile.201910
        - name: PLUSPLUS_SLUG_1
          valueFrom:
            secretKeyRef:
              name: plusplus
              key: slug
        - name: PORT
          value: "4000"
        - name: ROLLBAR_ACCESS_TOKEN
          valueFrom:
            secretKeyRef:
              name: rollbar
              key: access_token
        - name: ROLLBAR_ENVIRONMENT
          value: production
        - name: SECRET_KEY_BASE
          valueFrom:
            secretKeyRef:
              name: app
              key: secret_key_base
        - name: SIGNING_SALT
          valueFrom:
            secretKeyRef:
              name: app
              key: signing_salt
        - name: SLACK_APP_API_TOKEN
          valueFrom:
            secretKeyRef:
              name: slack
              key: app_api_token
        - name: SLACK_DEPLOY_WEBHOOK
          valueFrom:
            secretKeyRef:
              name: slack
              key: deploy_webhook
        - name: SLACK_INVITE_API_TOKEN
          valueFrom:
            secretKeyRef:
              name: slack
              key: invite_api_token
        - name: URL_HOST
          value: 2020.changelog.com
        - name: URL_PORT
          value: "443"
        - name: URL_SCHEME
          value: https
        - name: URL_STATIC_HOST
          value: cdn.changelog.com
        image: thechangelog/changelog.com:latest
        ports:
        - name: phoenix
          containerPort: 4000
        name: app
        resources:
          limits:
            cpu: 4
            memory: 4Gi
          requests:
            cpu: 2
            memory: 2Gi
        readinessProbe:
          httpGet:
            path: /health
            port: phoenix
            httpHeaders:
            - name: Host
              value: 127.0.0.1
          periodSeconds: 15
          timeoutSeconds: 14
        startupProbe:
          httpGet:
            path: /health
            port: phoenix
            httpHeaders:
            - name: Host
              value: 127.0.0.1
          failureThreshold: 30
          periodSeconds: 10
        volumeMounts:
        - mountPath: /uploads
          name: uploads
      volumes:
      - name: uploads
        persistentVolumeClaim:
          claimName: uploads
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  annotations: null
  name: tls-sync-fastly
  namespace: prod-2020-07
spec:
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 1
  jobTemplate:
    metadata:
      creationTimestamp: null
    spec:
      template:
        metadata:
          creationTimestamp: null
        spec:
          containers:
          - command:
            - /bin/sh
            - -c
            args:
            - |-
              #! https://developer.fastly.com/reference/api/tls/custom-certs/private-keys/
              cat > /tmp/key.json <<EOF
              {
                "data": {
                  "type": "tls_private_key",
                  "attributes": {
                    "key": "$(echo "$TLS_KEY" | awk '{ printf "%s\\n", $0 }')",
                    "name": "changelog.com"
                  }
                }
              }
              EOF
              curl --verbose \
                --header "Accept: application/vnd.api+json" \
                --header "Content-Type: application/vnd.api+json" \
                --header "Fastly-Key: $FASTLY_API_TOKEN" \
                --request POST \
                --data @/tmp/key.json \
                https://api.fastly.com/tls/private_keys

              #! https://developer.fastly.com/reference/api/tls/custom-certs/certificates/
              cat > /tmp/crt.json <<EOF
              {
                "data": {
                  "type": "tls_certificate",
                  "attributes": {
                    "cert_blob": "$(echo "$TLS_CRT" | awk '{ printf "%s\\n", $0 }')",
                    "name": "changelog.com"
                  }
                }
              }
              EOF
              curl --verbose \
                --header "Accept: application/vnd.api+json" \
                --header "Content-Type: application/vnd.api+json" \
                --header "Fastly-Key: $FASTLY_API_TOKEN" \
                --request PATCH \
                --data @/tmp/crt.json \
                https://api.fastly.com/tls/certificates/1LA0UjkMfnnMwzglSLdAc

              if [ -n "$DEBUG" ]
              then
                while true; do sleep 3600; done
              fi
            env:
            - name: DEBUG
              value: ""
            - name: TLS_KEY
              valueFrom:
                secretKeyRef:
                  name: wildcard-acme-tls
                  key: tls.key
            - name: TLS_CRT
              valueFrom:
                secretKeyRef:
                  name: wildcard-acme-tls
                  key: tls.crt
            - name: FASTLY_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: fastly
                  key: token
            image: curlimages/curl:7.72.0
            imagePullPolicy: IfNotPresent
            name: tls-sync-fastly
          restartPolicy: Never
  schedule: 0 9 * * *
  successfulJobsHistoryLimit: 3
  suspend: false
