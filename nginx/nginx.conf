#/* vim: set ft=cfg : */

# Run workers under this user
user  nginx;

# Set to the number of CPU cores, autodect them
worker_processes auto;

# Number of file descriptors used per nginx worker
worker_rlimit_nofile 10240;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
  # Determines how many clients will be served by each worker process.
  # (Max clients = worker_connections * worker_processes)
  # "Max clients" is also limited by the number of socket connections available on the system (~64k)
  worker_connections 1024;

  # Accept as many connections as possible, after nginx gets notification about a new connection.
  # May flood worker_connections, if that option is set too low.
  multi_accept on;
}


http {
  # Sendfile copies data between one FD and other from within the kernel.
  # More efficient than read() + write(), since the requires transferring data to and from the user space.
  sendfile on;
  sendfile_max_chunk 1m; # stop fast connections from clogging us up

  # Send HTTP response header in one packet instead of using partial frames.
  # This is useful for prepending headers before calling sendfile or for throughput optimization.
  tcp_nopush on;

  # Don't buffer data-sends (disable Nagle algorithm). Good for sending frequent small bursts of data in real time.
  tcp_nodelay on;

  # Timeout for keep-alive connections. Server will close connections after this time.
  keepalive_timeout 30;

  # Allow the server to close the connection after a client stops responding. Frees up socket-associated memory.
  reset_timedout_connection on;

  types_hash_max_size 2048;

  # Don't send any server info in the headers, only "nginx"
  server_tokens off;

  # Apply fix for very long server names
  server_names_hash_bucket_size 128;

  # Send the client a "request timed out" if the body is not loaded by this time.
  client_body_timeout 30;

  # If the client stops reading data, free up the stale client connection after this much time. Default 60.
  send_timeout 10;

  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  gzip on;
  gzip_disable msie6;
  gzip_min_length 10240;
  gzip_proxied expired no-cache no-store private auth;
  gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

  log_format host_timed '$http_host "$request" $status '
      '"$http_referer" "$http_user_agent" '
      '$request_time $upstream_response_time $body_bytes_sent';

  log_format debug_503 '[$time_local] $http_user_agent $remote_addr'
      ' [$request] s:$status r:$request_completion'
      ' t:$request_time rtt:$tcpinfo_rtt b:$bytes_sent';

  access_log off;

  fastcgi_cache_path /usr/share/nginx/cache levels=1:2 keys_zone=microcache:10m max_size=1024m inactive=1h;
  # Use 10MB of shared memory for storing active keys & data info. 1MB of shared memory can store ~8k keys.
  # If more than 1G of data is cached on disk, start removing the least recently used data to make room for newer data.
  # Cached data not accessed in the last hour will be removed, regardless of freshness.

  # If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
  # scheme used to connect to this server
  map $http_x_forwarded_proto $proxy_x_forwarded_proto {
    default $http_x_forwarded_proto;
    ''      $scheme;
  }
  # If we receive X-Forwarded-Port, pass it through; otherwise, pass along the
  # server port the client connected to
  map $http_x_forwarded_port $proxy_x_forwarded_port {
    default $http_x_forwarded_port;
    ''      $server_port;
  }
  # If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
  # Connection header that may have been passed to this server
  map $http_upgrade $proxy_connection {
    default upgrade;
    '' close;
  }
  # Set appropriate X-Forwarded-Ssl header
  map $scheme $proxy_x_forwarded_ssl {
    default off;
    https on;
  }

  proxy_redirect off;
  proxy_read_timeout 60s;
  proxy_connect_timeout 5s;
  proxy_send_timeout 60s;

  proxy_http_version 1.1;
  proxy_buffering off;

  # Disable response buffering to temporary files
  # http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_max_temp_file_size
  proxy_max_temp_file_size 0;

  proxy_set_header Host $http_host;
  proxy_set_header Upgrade $http_upgrade;
  proxy_set_header Connection $proxy_connection;
  proxy_set_header X-Real-IP $remote_addr;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
  proxy_set_header X-Forwarded-Ssl $proxy_x_forwarded_ssl;
  proxy_set_header X-Forwarded-Port $proxy_x_forwarded_port;
  # Mitigate httpoxy attack
  proxy_set_header Proxy "";

  # Sets the maximum allowed size of the client request body,
  # specified in the “Content-Length” request header field
  # http://nginx.org/en/docs/http/ngx_http_core_module.html#client_max_body_size
  client_max_body_size 200M;

  include /etc/nginx/conf.d/*.conf;
}
